rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*')
        && request.resource.size < 5 * 1024 * 1024; // 5MB
    }
    
    function isValidDocument() {
      return request.resource.contentType.matches('application/pdf')
        && request.resource.size < 10 * 1024 * 1024; // 10MB
    }
    
    // Regras padrão - negar tudo
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // Regras para uploads de usuários
    match /users/{userId}/{allPaths=**} {
      // Leitura permitida para usuários autenticados
      allow read: if isAuthenticated();
      
      // Escrita permitida apenas para o próprio usuário
      allow create: if isOwner(userId) && (
        isValidImage() || isValidDocument()
      );
      
      allow update, delete: if isOwner(userId);
    }
    
    // Regras para arquivos públicos
    match /public/{allPaths=**} {
      // Leitura permitida para todos
      allow read: if true;
      
      // Escrita apenas para usuários autenticados e com validação de tipo
      allow create: if isAuthenticated() && (
        isValidImage() || isValidDocument()
      );
      
      allow update, delete: if isAuthenticated();
    }
    
    // Regras para arquivos temporários
    match /temp/{allPaths=**} {
      allow read, write: if isAuthenticated();
      
      // Arquivos temporários são automaticamente deletados após 24h
      allow delete: if isAuthenticated();
    }
  }
} 